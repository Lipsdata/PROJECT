-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hevc_loop_filter_chroma_8bit_hls_hevc_loop_filter_chroma_8bit_hls_Pipeline_VITIS_LOOP_87_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    sext_ln76 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_12 : IN STD_LOGIC_VECTOR (20 downto 0);
    mul13_cast : IN STD_LOGIC_VECTOR (20 downto 0);
    pix_base_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    pix_base_ce0 : OUT STD_LOGIC;
    pix_base_we0 : OUT STD_LOGIC;
    pix_base_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pix_base_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pix_base_address1 : OUT STD_LOGIC_VECTOR (20 downto 0);
    pix_base_ce1 : OUT STD_LOGIC;
    pix_base_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty : IN STD_LOGIC_VECTOR (20 downto 0);
    sub38 : IN STD_LOGIC_VECTOR (15 downto 0);
    tc : IN STD_LOGIC_VECTOR (14 downto 0);
    select_ln84 : IN STD_LOGIC_VECTOR (7 downto 0);
    select_ln85 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of hevc_loop_filter_chroma_8bit_hls_hevc_loop_filter_chroma_8bit_hls_Pipeline_VITIS_LOOP_87_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln87_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal reg_185 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tc_cast_fu_190_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tc_cast_reg_569 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln76_cast_fu_194_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln76_cast_reg_575 : STD_LOGIC_VECTOR (33 downto 0);
    signal no_p_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal no_p_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal no_q_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal no_q_reg_584 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_588 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal pix_fu_242_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal pix_reg_592 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal pix_base_addr_1_reg_605 : STD_LOGIC_VECTOR (20 downto 0);
    signal pix_base_load_1_reg_610 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_base_addr_2_reg_617 : STD_LOGIC_VECTOR (20 downto 0);
    signal pix_base_load_3_reg_627 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln95_fu_290_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln95_reg_632 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln95_fu_300_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln95_reg_637 : STD_LOGIC_VECTOR (8 downto 0);
    signal delta_fu_366_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal delta_reg_642 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal cond70_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cond70_reg_650 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal cond95_fu_511_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cond95_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln89_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln90_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln92_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_fu_88 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    signal add_ln103_fu_522_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal d_fu_92 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal d_2_fu_229_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal pix_base_ce1_local : STD_LOGIC;
    signal pix_base_address1_local : STD_LOGIC_VECTOR (20 downto 0);
    signal pix_base_ce0_local : STD_LOGIC;
    signal pix_base_address0_local : STD_LOGIC_VECTOR (20 downto 0);
    signal pix_base_we0_local : STD_LOGIC;
    signal pix_base_d0_local : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln87_fu_238_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln89_fu_252_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln90_fu_261_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln92_fu_274_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln95_2_fu_283_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln95_3_fu_287_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln95_4_fu_296_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal tmp_3_fu_306_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln95_6_fu_320_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln95_fu_313_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln95_1_fu_323_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln95_5_fu_317_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln95_1_fu_329_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_335_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_fu_345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln96_1_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln96_fu_359_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal sext_ln98_fu_380_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln95_1_fu_377_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln98_fu_383_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_397_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln98_fu_413_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_389_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_23_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln98_cast_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln98_1_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln95_fu_373_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln101_fu_449_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln101_fu_452_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_466_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln101_fu_482_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_458_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_s_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln101_cast_fu_497_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln101_1_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_583 : BOOLEAN;
    signal ap_condition_587 : BOOLEAN;
    signal ap_condition_118 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hevc_loop_filter_chroma_8bit_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component hevc_loop_filter_chroma_8bit_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    d_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                if ((ap_const_boolean_1 = ap_condition_587)) then 
                    d_fu_92 <= ap_const_lv3_0;
                elsif ((ap_const_boolean_1 = ap_condition_583)) then 
                    d_fu_92 <= d_2_fu_229_p2;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_118)) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    idx_fu_88 <= ap_const_lv34_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln87_reg_588 = ap_const_lv1_0))) then 
                    idx_fu_88 <= add_ln103_fu_522_p2;
                end if;
            end if; 
        end if;
    end process;

    reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    reg_185 <= pix_base_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    reg_185 <= pix_base_q1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln95_reg_637 <= add_ln95_fu_300_p2;
                sub_ln95_reg_632 <= sub_ln95_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_logic_1 = ap_ce))) then
                cond70_reg_650 <= cond70_fu_441_p3;
                cond95_reg_655 <= cond95_fu_511_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                delta_reg_642 <= delta_fu_366_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln87_reg_588 <= icmp_ln87_fu_223_p2;
                pix_reg_592 <= pix_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                no_p_reg_580 <= no_p_fu_198_p2;
                no_q_reg_584 <= no_q_fu_204_p2;
                sext_ln76_cast_reg_575 <= sext_ln76_cast_fu_194_p1;
                    tc_cast_reg_569(14 downto 0) <= tc_cast_fu_190_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                pix_base_addr_1_reg_605 <= zext_ln90_fu_265_p1(21 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_ce))) then
                pix_base_addr_2_reg_617 <= zext_ln70_fu_270_p1(21 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_ce))) then
                pix_base_load_1_reg_610 <= pix_base_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                pix_base_load_3_reg_627 <= pix_base_q1;
            end if;
        end if;
    end process;
    tc_cast_reg_569(15) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage6_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln103_fu_522_p2 <= std_logic_vector(signed(sext_ln76_cast_reg_575) + signed(idx_fu_88));
    add_ln89_fu_252_p2 <= std_logic_vector(unsigned(pix_reg_592) + unsigned(mul13_cast));
    add_ln92_fu_274_p2 <= std_logic_vector(unsigned(pix_reg_592) + unsigned(empty));
    add_ln95_1_fu_323_p2 <= std_logic_vector(unsigned(zext_ln95_6_fu_320_p1) + unsigned(sext_ln95_fu_313_p1));
    add_ln95_fu_300_p2 <= std_logic_vector(unsigned(zext_ln95_4_fu_296_p1) + unsigned(ap_const_lv9_4));
    add_ln98_1_fu_416_p2 <= std_logic_vector(unsigned(pix_base_load_1_reg_610) + unsigned(trunc_ln98_fu_413_p1));
    add_ln98_fu_383_p2 <= std_logic_vector(signed(sext_ln98_fu_380_p1) + signed(zext_ln95_1_fu_377_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage4_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage5_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage6_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_condition_118_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_118 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_583_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, icmp_ln87_fu_223_p2, ap_block_pp0_stage1_11001)
    begin
                ap_condition_583 <= ((icmp_ln87_fu_223_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_587_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
                ap_condition_587 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln87_fu_223_p2)
    begin
        if (((icmp_ln87_fu_223_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cond70_fu_441_p3 <= 
        select_ln98_cast_fu_427_p3 when (empty_13_fu_435_p2(0) = '1') else 
        add_ln98_1_fu_416_p2;
    cond95_fu_511_p3 <= 
        select_ln101_cast_fu_497_p3 when (empty_14_fu_505_p2(0) = '1') else 
        sub_ln101_1_fu_485_p2;
    d_2_fu_229_p2 <= std_logic_vector(unsigned(d_fu_92) + unsigned(ap_const_lv3_1));
    delta_fu_366_p3 <= 
        sub38 when (icmp_ln96_fu_349_p2(0) = '1') else 
        select_ln96_fu_359_p3;
    empty_13_fu_435_p2 <= (tmp_4_fu_389_p3 or icmp_ln98_fu_407_p2);
    empty_14_fu_505_p2 <= (tmp_6_fu_458_p3 or icmp_ln101_fu_476_p2);
    icmp_ln101_fu_476_p2 <= "1" when (signed(tmp_7_fu_466_p4) > signed(ap_const_lv9_0)) else "0";
    icmp_ln87_fu_223_p2 <= "1" when (d_fu_92 = ap_const_lv3_4) else "0";
    icmp_ln96_1_fu_354_p2 <= "1" when (signed(temp_fu_345_p1) > signed(tc_cast_reg_569)) else "0";
    icmp_ln96_fu_349_p2 <= "1" when (signed(temp_fu_345_p1) < signed(sub38)) else "0";
    icmp_ln98_fu_407_p2 <= "1" when (signed(tmp_5_fu_397_p4) > signed(ap_const_lv9_0)) else "0";
    no_p_fu_198_p2 <= "1" when (select_ln84 = ap_const_lv8_0) else "0";
    no_q_fu_204_p2 <= "1" when (select_ln85 = ap_const_lv8_0) else "0";
    not_23_fu_421_p2 <= (tmp_4_fu_389_p3 xor ap_const_lv1_1);
    not_s_fu_491_p2 <= (tmp_6_fu_458_p3 xor ap_const_lv1_1);
    pix_base_address0 <= pix_base_address0_local;

    pix_base_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, pix_base_addr_1_reg_605, pix_base_addr_2_reg_617, ap_block_pp0_stage2, zext_ln90_fu_265_p1, zext_ln70_fu_270_p1, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            pix_base_address0_local <= pix_base_addr_2_reg_617;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pix_base_address0_local <= pix_base_addr_1_reg_605;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            pix_base_address0_local <= zext_ln70_fu_270_p1(21 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            pix_base_address0_local <= zext_ln90_fu_265_p1(21 - 1 downto 0);
        else 
            pix_base_address0_local <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    pix_base_address1 <= pix_base_address1_local;

    pix_base_address1_local_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, zext_ln89_fu_256_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln92_fu_278_p1)
    begin
        if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                pix_base_address1_local <= zext_ln92_fu_278_p1(21 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                pix_base_address1_local <= zext_ln89_fu_256_p1(21 - 1 downto 0);
            else 
                pix_base_address1_local <= "XXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            pix_base_address1_local <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    pix_base_ce0 <= pix_base_ce0_local;

    pix_base_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_ce, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_ce)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            pix_base_ce0_local <= ap_const_logic_1;
        else 
            pix_base_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    pix_base_ce1 <= pix_base_ce1_local;

    pix_base_ce1_local_assign_proc : process(ap_ce, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_ce)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            pix_base_ce1_local <= ap_const_logic_1;
        else 
            pix_base_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    pix_base_d0 <= pix_base_d0_local;

    pix_base_d0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, cond70_reg_650, cond95_reg_655, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                pix_base_d0_local <= cond95_reg_655;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                pix_base_d0_local <= cond70_reg_650;
            else 
                pix_base_d0_local <= "XXXXXXXX";
            end if;
        else 
            pix_base_d0_local <= "XXXXXXXX";
        end if; 
    end process;

    pix_base_we0 <= pix_base_we0_local;

    pix_base_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_ce, ap_block_pp0_stage0_11001, no_p_reg_580, no_q_reg_584, icmp_ln87_reg_588, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (no_q_reg_584 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_reg_588 = ap_const_lv1_0) and (no_p_reg_580 = ap_const_lv1_1)))) then 
            pix_base_we0_local <= ap_const_logic_1;
        else 
            pix_base_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    pix_fu_242_p2 <= std_logic_vector(unsigned(trunc_ln87_fu_238_p1) + unsigned(empty_12));
    select_ln101_cast_fu_497_p3 <= 
        ap_const_lv8_FF when (not_s_fu_491_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln96_fu_359_p3 <= 
        tc_cast_reg_569 when (icmp_ln96_1_fu_354_p2(0) = '1') else 
        temp_fu_345_p1;
    select_ln98_cast_fu_427_p3 <= 
        ap_const_lv8_FF when (not_23_fu_421_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln101_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delta_reg_642),17));

        sext_ln76_cast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln76),34));

        sext_ln95_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_306_p3),12));

        sext_ln98_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delta_reg_642),17));

    sub_ln101_1_fu_485_p2 <= std_logic_vector(unsigned(reg_185) - unsigned(trunc_ln101_fu_482_p1));
    sub_ln101_fu_452_p2 <= std_logic_vector(unsigned(zext_ln95_fu_373_p1) - unsigned(sext_ln101_fu_449_p1));
    sub_ln90_fu_261_p2 <= std_logic_vector(unsigned(pix_reg_592) - unsigned(empty));
    sub_ln95_1_fu_329_p2 <= std_logic_vector(unsigned(add_ln95_1_fu_323_p2) - unsigned(zext_ln95_5_fu_317_p1));
    sub_ln95_fu_290_p2 <= std_logic_vector(unsigned(zext_ln95_2_fu_283_p1) - unsigned(zext_ln95_3_fu_287_p1));
    tc_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tc),16));
        temp_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_335_p4),16));

    tmp_2_fu_335_p4 <= sub_ln95_1_fu_329_p2(11 downto 3);
    tmp_3_fu_306_p3 <= (sub_ln95_reg_632 & ap_const_lv2_0);
    tmp_4_fu_389_p3 <= add_ln98_fu_383_p2(16 downto 16);
    tmp_5_fu_397_p4 <= add_ln98_fu_383_p2(16 downto 8);
    tmp_6_fu_458_p3 <= sub_ln101_fu_452_p2(16 downto 16);
    tmp_7_fu_466_p4 <= sub_ln101_fu_452_p2(16 downto 8);
    trunc_ln101_fu_482_p1 <= delta_reg_642(8 - 1 downto 0);
    trunc_ln87_fu_238_p1 <= idx_fu_88(21 - 1 downto 0);
    trunc_ln98_fu_413_p1 <= delta_reg_642(8 - 1 downto 0);
    zext_ln70_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pix_reg_592),64));
    zext_ln89_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln89_fu_252_p2),64));
    zext_ln90_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln90_fu_261_p2),64));
    zext_ln92_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_fu_274_p2),64));
    zext_ln95_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pix_base_load_1_reg_610),17));
    zext_ln95_2_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pix_base_q0),9));
    zext_ln95_3_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pix_base_load_1_reg_610),9));
    zext_ln95_4_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_185),9));
    zext_ln95_5_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pix_base_load_3_reg_627),12));
    zext_ln95_6_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln95_reg_637),12));
    zext_ln95_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_185),17));
end behav;
