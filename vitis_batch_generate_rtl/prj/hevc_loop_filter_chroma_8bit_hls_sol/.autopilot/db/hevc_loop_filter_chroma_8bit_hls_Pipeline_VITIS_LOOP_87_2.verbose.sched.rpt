

================================================================
== Vitis HLS Report for 'hevc_loop_filter_chroma_8bit_hls_Pipeline_VITIS_LOOP_87_2'
================================================================
* Date:           Thu Feb 27 14:43:42 2025

* Version:        2024.2 (Build 5238294 on Nov  8 2024)
* Project:        prj
* Solution:       hevc_loop_filter_chroma_8bit_hls_sol (Vivado IP Flow Target)
* Product family: virtexuplus
* Target device:  xcvu19p-fsvb3824-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+---------+----------+------------+
    |  Clock |  Target | Estimated| Uncertainty|
    +--------+---------+----------+------------+
    |ap_clk  |  3.30 ns|  2.063 ns|     0.89 ns|
    +--------+---------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+------------------------------------------------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval |                    Pipeline                    |
    |   min   |   max   |    min    |    max    | min | max |                      Type                      |
    +---------+---------+-----------+-----------+-----+-----+------------------------------------------------+
    |       30|       30|  99.000 ns|  99.000 ns|   29|   29|  loop auto-rewind stp (delay=0 clock cycles(s))|
    +---------+---------+-----------+-----------+-----+-----+------------------------------------------------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_87_2  |       28|       28|         8|          7|          1|     4|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 7, depth = 9


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 9
* Pipeline : 1
  Pipeline-0 : II = 7, D = 9, States = { 1 2 3 4 5 6 7 8 9 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.70>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%idx = alloca i32 1"   --->   Operation 11 'alloca' 'idx' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%d = alloca i32 1" [../tutorial_example/source/hls.cpp:70]   --->   Operation 12 'alloca' 'd' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%select_ln85_read = read i8 @_ssdm_op_Read.ap_auto.i8, i8 %select_ln85"   --->   Operation 13 'read' 'select_ln85_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%select_ln84_read = read i8 @_ssdm_op_Read.ap_auto.i8, i8 %select_ln84"   --->   Operation 14 'read' 'select_ln84_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%tc_read = read i15 @_ssdm_op_Read.ap_auto.i15, i15 %tc"   --->   Operation 15 'read' 'tc_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%sub38_read = read i16 @_ssdm_op_Read.ap_auto.i16, i16 %sub38"   --->   Operation 16 'read' 'sub38_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%tmp = read i21 @_ssdm_op_Read.ap_auto.i21, i21 %empty"   --->   Operation 17 'read' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%mul13_cast_read = read i21 @_ssdm_op_Read.ap_auto.i21, i21 %mul13_cast"   --->   Operation 18 'read' 'mul13_cast_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%tmp_1 = read i21 @_ssdm_op_Read.ap_auto.i21, i21 %empty_12"   --->   Operation 19 'read' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%sext_ln76_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %sext_ln76"   --->   Operation 20 'read' 'sext_ln76_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%tc_cast = zext i15 %tc_read"   --->   Operation 21 'zext' 'tc_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%sext_ln76_cast = sext i32 %sext_ln76_read"   --->   Operation 22 'sext' 'sext_ln76_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i8 %pix_base, void @empty_1, i32 0, i32 0, void @empty_0, i32 4294967295, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0, i32 0"   --->   Operation 23 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.70ns)   --->   "%no_p = icmp_eq  i8 %select_ln84_read, i8 0" [../tutorial_example/source/hls.cpp:84]   --->   Operation 24 'icmp' 'no_p' <Predicate = true> <Delay = 0.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 25 [1/1] (0.70ns)   --->   "%no_q = icmp_eq  i8 %select_ln85_read, i8 0" [../tutorial_example/source/hls.cpp:85]   --->   Operation 25 'icmp' 'no_q' <Predicate = true> <Delay = 0.70> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 26 [1/1] (0.38ns)   --->   "%store_ln70 = store i3 0, i3 %d" [../tutorial_example/source/hls.cpp:70]   --->   Operation 26 'store' 'store_ln70' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 27 [1/1] (0.38ns)   --->   "%store_ln0 = store i34 0, i34 %idx"   --->   Operation 27 'store' 'store_ln0' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%br_ln87 = br void %for.body12" [../tutorial_example/source/hls.cpp:87]   --->   Operation 28 'br' 'br_ln87' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 0.95>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%d_1 = load i3 %d" [../tutorial_example/source/hls.cpp:87]   --->   Operation 29 'load' 'd_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (0.57ns)   --->   "%icmp_ln87 = icmp_eq  i3 %d_1, i3 4" [../tutorial_example/source/hls.cpp:87]   --->   Operation 30 'icmp' 'icmp_ln87' <Predicate = true> <Delay = 0.57> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.57> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 31 [1/1] (0.57ns)   --->   "%d_2 = add i3 %d_1, i3 1" [../tutorial_example/source/hls.cpp:87]   --->   Operation 31 'add' 'd_2' <Predicate = true> <Delay = 0.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "%br_ln87 = br i1 %icmp_ln87, void %for.body12.split, void %cleanup.loopexit.exitStub" [../tutorial_example/source/hls.cpp:87]   --->   Operation 32 'br' 'br_ln87' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 33 [1/1] (0.00ns)   --->   "%idx_load = load i34 %idx" [../tutorial_example/source/hls.cpp:87]   --->   Operation 33 'load' 'idx_load' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_2 : Operation 34 [1/1] (0.00ns)   --->   "%trunc_ln87 = trunc i34 %idx_load" [../tutorial_example/source/hls.cpp:87]   --->   Operation 34 'trunc' 'trunc_ln87' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_2 : Operation 35 [1/1] (0.81ns)   --->   "%pix = add i21 %trunc_ln87, i21 %tmp_1" [../tutorial_example/source/hls.cpp:70]   --->   Operation 35 'add' 'pix' <Predicate = (!icmp_ln87)> <Delay = 0.81> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.81> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 36 [1/1] (0.00ns)   --->   "%br_ln97 = br i1 %no_p, void %if.end75, void %if.then51_ifconv" [../tutorial_example/source/hls.cpp:97]   --->   Operation 36 'br' 'br_ln97' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_2 : Operation 37 [1/1] (0.00ns)   --->   "%br_ln100 = br i1 %no_q, void %for.inc, void %if.then76_ifconv" [../tutorial_example/source/hls.cpp:100]   --->   Operation 37 'br' 'br_ln100' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_2 : Operation 38 [1/1] (0.38ns)   --->   "%store_ln70 = store i3 %d_2, i3 %d" [../tutorial_example/source/hls.cpp:70]   --->   Operation 38 'store' 'store_ln70' <Predicate = (!icmp_ln87)> <Delay = 0.38>
ST_2 : Operation 110 [1/1] (0.38ns)   --->   "%ret_ln0 = ret"   --->   Operation 110 'ret' 'ret_ln0' <Predicate = (icmp_ln87)> <Delay = 0.38>

State 3 <SV = 2> <Delay = 2.06>
ST_3 : Operation 39 [1/1] (0.81ns)   --->   "%add_ln89 = add i21 %pix, i21 %mul13_cast_read" [../tutorial_example/source/hls.cpp:89]   --->   Operation 39 'add' 'add_ln89' <Predicate = (!icmp_ln87)> <Delay = 0.81> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.81> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 40 [1/1] (0.00ns)   --->   "%zext_ln89 = zext i21 %add_ln89" [../tutorial_example/source/hls.cpp:89]   --->   Operation 40 'zext' 'zext_ln89' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_3 : Operation 41 [1/1] (0.00ns)   --->   "%pix_base_addr = getelementptr i8 %pix_base, i64 0, i64 %zext_ln89" [../tutorial_example/source/hls.cpp:89]   --->   Operation 41 'getelementptr' 'pix_base_addr' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_3 : Operation 42 [2/2] (1.24ns)   --->   "%pix_base_load = load i21 %pix_base_addr" [../tutorial_example/source/hls.cpp:89]   --->   Operation 42 'load' 'pix_base_load' <Predicate = (!icmp_ln87)> <Delay = 1.24> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 1.24> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 2073600> <RAM>
ST_3 : Operation 43 [1/1] (0.81ns)   --->   "%sub_ln90 = sub i21 %pix, i21 %tmp" [../tutorial_example/source/hls.cpp:90]   --->   Operation 43 'sub' 'sub_ln90' <Predicate = (!icmp_ln87)> <Delay = 0.81> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.81> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 44 [1/1] (0.00ns)   --->   "%zext_ln90 = zext i21 %sub_ln90" [../tutorial_example/source/hls.cpp:90]   --->   Operation 44 'zext' 'zext_ln90' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_3 : Operation 45 [1/1] (0.00ns)   --->   "%pix_base_addr_1 = getelementptr i8 %pix_base, i64 0, i64 %zext_ln90" [../tutorial_example/source/hls.cpp:90]   --->   Operation 45 'getelementptr' 'pix_base_addr_1' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_3 : Operation 46 [2/2] (1.24ns)   --->   "%pix_base_load_1 = load i21 %pix_base_addr_1" [../tutorial_example/source/hls.cpp:90]   --->   Operation 46 'load' 'pix_base_load_1' <Predicate = (!icmp_ln87)> <Delay = 1.24> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 1.24> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 2073600> <RAM>

State 4 <SV = 3> <Delay = 2.06>
ST_4 : Operation 47 [1/1] (0.00ns)   --->   "%zext_ln70 = zext i21 %pix" [../tutorial_example/source/hls.cpp:70]   --->   Operation 47 'zext' 'zext_ln70' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_4 : Operation 48 [1/2] ( I:1.24ns O:1.24ns )   --->   "%pix_base_load = load i21 %pix_base_addr" [../tutorial_example/source/hls.cpp:89]   --->   Operation 48 'load' 'pix_base_load' <Predicate = (!icmp_ln87)> <Delay = 1.24> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 1.24> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 2073600> <RAM>
ST_4 : Operation 49 [1/2] ( I:1.24ns O:1.24ns )   --->   "%pix_base_load_1 = load i21 %pix_base_addr_1" [../tutorial_example/source/hls.cpp:90]   --->   Operation 49 'load' 'pix_base_load_1' <Predicate = (!icmp_ln87)> <Delay = 1.24> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 1.24> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 2073600> <RAM>
ST_4 : Operation 50 [1/1] (0.00ns)   --->   "%pix_base_addr_2 = getelementptr i8 %pix_base, i64 0, i64 %zext_ln70" [../tutorial_example/source/hls.cpp:91]   --->   Operation 50 'getelementptr' 'pix_base_addr_2' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_4 : Operation 51 [2/2] (1.24ns)   --->   "%pix_base_load_2 = load i21 %pix_base_addr_2" [../tutorial_example/source/hls.cpp:91]   --->   Operation 51 'load' 'pix_base_load_2' <Predicate = (!icmp_ln87)> <Delay = 1.24> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 1.24> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 2073600> <RAM>
ST_4 : Operation 52 [1/1] (0.81ns)   --->   "%add_ln92 = add i21 %pix, i21 %tmp" [../tutorial_example/source/hls.cpp:92]   --->   Operation 52 'add' 'add_ln92' <Predicate = (!icmp_ln87)> <Delay = 0.81> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.81> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 53 [1/1] (0.00ns)   --->   "%zext_ln92 = zext i21 %add_ln92" [../tutorial_example/source/hls.cpp:92]   --->   Operation 53 'zext' 'zext_ln92' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_4 : Operation 54 [1/1] (0.00ns)   --->   "%pix_base_addr_3 = getelementptr i8 %pix_base, i64 0, i64 %zext_ln92" [../tutorial_example/source/hls.cpp:92]   --->   Operation 54 'getelementptr' 'pix_base_addr_3' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_4 : Operation 55 [2/2] (1.24ns)   --->   "%pix_base_load_3 = load i21 %pix_base_addr_3" [../tutorial_example/source/hls.cpp:92]   --->   Operation 55 'load' 'pix_base_load_3' <Predicate = (!icmp_ln87)> <Delay = 1.24> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 1.24> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 2073600> <RAM>

State 5 <SV = 4> <Delay = 1.95>
ST_5 : Operation 56 [1/2] ( I:1.24ns O:1.24ns )   --->   "%pix_base_load_2 = load i21 %pix_base_addr_2" [../tutorial_example/source/hls.cpp:91]   --->   Operation 56 'load' 'pix_base_load_2' <Predicate = (!icmp_ln87)> <Delay = 1.24> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 1.24> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 2073600> <RAM>
ST_5 : Operation 57 [1/2] ( I:1.24ns O:1.24ns )   --->   "%pix_base_load_3 = load i21 %pix_base_addr_3" [../tutorial_example/source/hls.cpp:92]   --->   Operation 57 'load' 'pix_base_load_3' <Predicate = (!icmp_ln87)> <Delay = 1.24> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 1.24> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 2073600> <RAM>
ST_5 : Operation 58 [1/1] (0.00ns)   --->   "%zext_ln95_2 = zext i8 %pix_base_load_2" [../tutorial_example/source/hls.cpp:95]   --->   Operation 58 'zext' 'zext_ln95_2' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_5 : Operation 59 [1/1] (0.00ns)   --->   "%zext_ln95_3 = zext i8 %pix_base_load_1" [../tutorial_example/source/hls.cpp:95]   --->   Operation 59 'zext' 'zext_ln95_3' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_5 : Operation 60 [1/1] (0.70ns)   --->   "%sub_ln95 = sub i9 %zext_ln95_2, i9 %zext_ln95_3" [../tutorial_example/source/hls.cpp:95]   --->   Operation 60 'sub' 'sub_ln95' <Predicate = (!icmp_ln87)> <Delay = 0.70> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 61 [1/1] (0.00ns)   --->   "%zext_ln95_4 = zext i8 %pix_base_load" [../tutorial_example/source/hls.cpp:95]   --->   Operation 61 'zext' 'zext_ln95_4' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_5 : Operation 62 [1/1] (0.70ns)   --->   "%add_ln95 = add i9 %zext_ln95_4, i9 4" [../tutorial_example/source/hls.cpp:95]   --->   Operation 62 'add' 'add_ln95' <Predicate = (!icmp_ln87)> <Delay = 0.70> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 6 <SV = 5> <Delay = 1.83>
ST_6 : Operation 63 [1/1] (0.00ns)   --->   "%tmp_3 = bitconcatenate i11 @_ssdm_op_BitConcatenate.i11.i9.i2, i9 %sub_ln95, i2 0" [../tutorial_example/source/hls.cpp:95]   --->   Operation 63 'bitconcatenate' 'tmp_3' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_6 : Operation 64 [1/1] (0.00ns)   --->   "%sext_ln95 = sext i11 %tmp_3" [../tutorial_example/source/hls.cpp:95]   --->   Operation 64 'sext' 'sext_ln95' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_6 : Operation 65 [1/1] (0.00ns)   --->   "%zext_ln95_5 = zext i8 %pix_base_load_3" [../tutorial_example/source/hls.cpp:95]   --->   Operation 65 'zext' 'zext_ln95_5' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_6 : Operation 66 [1/1] (0.00ns)   --->   "%zext_ln95_6 = zext i9 %add_ln95" [../tutorial_example/source/hls.cpp:95]   --->   Operation 66 'zext' 'zext_ln95_6' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_6 : Operation 67 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln95_1 = add i12 %zext_ln95_6, i12 %sext_ln95" [../tutorial_example/source/hls.cpp:95]   --->   Operation 67 'add' 'add_ln95_1' <Predicate = (!icmp_ln87)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.37> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 68 [1/1] (0.75ns) (root node of TernaryAdder)   --->   "%sub_ln95_1 = sub i12 %add_ln95_1, i12 %zext_ln95_5" [../tutorial_example/source/hls.cpp:95]   --->   Operation 68 'sub' 'sub_ln95_1' <Predicate = (!icmp_ln87)> <Delay = 0.75> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.37> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 69 [1/1] (0.00ns)   --->   "%tmp_2 = partselect i9 @_ssdm_op_PartSelect.i9.i12.i32.i32, i12 %sub_ln95_1, i32 3, i32 11" [../tutorial_example/source/hls.cpp:95]   --->   Operation 69 'partselect' 'tmp_2' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_6 : Operation 70 [1/1] (0.00ns)   --->   "%temp = sext i9 %tmp_2" [../tutorial_example/source/hls.cpp:95]   --->   Operation 70 'sext' 'temp' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_6 : Operation 71 [1/1] (0.78ns)   --->   "%icmp_ln96 = icmp_slt  i16 %temp, i16 %sub38_read" [../tutorial_example/source/hls.cpp:96]   --->   Operation 71 'icmp' 'icmp_ln96' <Predicate = (!icmp_ln87)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 72 [1/1] (0.77ns)   --->   "%icmp_ln96_1 = icmp_sgt  i16 %temp, i16 %tc_cast" [../tutorial_example/source/hls.cpp:96]   --->   Operation 72 'icmp' 'icmp_ln96_1' <Predicate = (!icmp_ln87)> <Delay = 0.77> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 73 [1/1] (0.00ns) (grouped into LUT with out node delta)   --->   "%select_ln96 = select i1 %icmp_ln96_1, i16 %tc_cast, i16 %temp" [../tutorial_example/source/hls.cpp:96]   --->   Operation 73 'select' 'select_ln96' <Predicate = (!icmp_ln87)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.29> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_6 : Operation 74 [1/1] (0.29ns) (out node of the LUT)   --->   "%delta = select i1 %icmp_ln96, i16 %sub38_read, i16 %select_ln96" [../tutorial_example/source/hls.cpp:96]   --->   Operation 74 'select' 'delta' <Predicate = (!icmp_ln87)> <Delay = 0.29> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.24> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 7 <SV = 6> <Delay = 1.80>
ST_7 : Operation 75 [1/1] (0.00ns)   --->   "%specpipeline_ln88 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 0, i32 0, void @empty_0" [../tutorial_example/source/hls.cpp:88]   --->   Operation 75 'specpipeline' 'specpipeline_ln88' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_7 : Operation 76 [1/1] (0.00ns)   --->   "%speclooptripcount_ln70 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 4, i64 4, i64 4" [../tutorial_example/source/hls.cpp:70]   --->   Operation 76 'speclooptripcount' 'speclooptripcount_ln70' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_7 : Operation 77 [1/1] (0.00ns)   --->   "%specloopname_ln87 = specloopname void @_ssdm_op_SpecLoopName, void @empty_3" [../tutorial_example/source/hls.cpp:87]   --->   Operation 77 'specloopname' 'specloopname_ln87' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_7 : Operation 78 [1/1] (0.00ns)   --->   "%zext_ln95 = zext i8 %pix_base_load_2" [../tutorial_example/source/hls.cpp:95]   --->   Operation 78 'zext' 'zext_ln95' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_7 : Operation 79 [1/1] (0.00ns)   --->   "%zext_ln95_1 = zext i8 %pix_base_load_1" [../tutorial_example/source/hls.cpp:95]   --->   Operation 79 'zext' 'zext_ln95_1' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_7 : Operation 80 [1/1] (0.00ns)   --->   "%sext_ln98 = sext i16 %delta" [../tutorial_example/source/hls.cpp:98]   --->   Operation 80 'sext' 'sext_ln98' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.00>
ST_7 : Operation 81 [1/1] (0.78ns)   --->   "%add_ln98 = add i17 %sext_ln98, i17 %zext_ln95_1" [../tutorial_example/source/hls.cpp:98]   --->   Operation 81 'add' 'add_ln98' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 82 [1/1] (0.00ns)   --->   "%tmp_4 = bitselect i1 @_ssdm_op_BitSelect.i1.i17.i32, i17 %add_ln98, i32 16" [../tutorial_example/source/hls.cpp:98]   --->   Operation 82 'bitselect' 'tmp_4' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.00>
ST_7 : Operation 83 [1/1] (0.00ns)   --->   "%tmp_5 = partselect i9 @_ssdm_op_PartSelect.i9.i17.i32.i32, i17 %add_ln98, i32 8, i32 16" [../tutorial_example/source/hls.cpp:98]   --->   Operation 83 'partselect' 'tmp_5' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.00>
ST_7 : Operation 84 [1/1] (0.71ns)   --->   "%icmp_ln98 = icmp_sgt  i9 %tmp_5, i9 0" [../tutorial_example/source/hls.cpp:98]   --->   Operation 84 'icmp' 'icmp_ln98' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.71> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.71> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 85 [1/1] (0.00ns)   --->   "%trunc_ln98 = trunc i16 %delta" [../tutorial_example/source/hls.cpp:98]   --->   Operation 85 'trunc' 'trunc_ln98' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.00>
ST_7 : Operation 86 [1/1] (0.70ns)   --->   "%add_ln98_1 = add i8 %pix_base_load_1, i8 %trunc_ln98" [../tutorial_example/source/hls.cpp:98]   --->   Operation 86 'add' 'add_ln98_1' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.70> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 87 [1/1] (0.00ns) (grouped into LUT with out node cond70)   --->   "%not_23 = xor i1 %tmp_4, i1 1" [../tutorial_example/source/hls.cpp:98]   --->   Operation 87 'xor' 'not_23' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 88 [1/1] (0.00ns) (grouped into LUT with out node cond70)   --->   "%select_ln98_cast = select i1 %not_23, i8 255, i8 0" [../tutorial_example/source/hls.cpp:98]   --->   Operation 88 'select' 'select_ln98_cast' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 89 [1/1] (0.00ns) (grouped into LUT with out node cond70)   --->   "%empty_13 = or i1 %tmp_4, i1 %icmp_ln98" [../tutorial_example/source/hls.cpp:98]   --->   Operation 89 'or' 'empty_13' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 90 [1/1] (0.30ns) (out node of the LUT)   --->   "%cond70 = select i1 %empty_13, i8 %select_ln98_cast, i8 %add_ln98_1" [../tutorial_example/source/hls.cpp:98]   --->   Operation 90 'select' 'cond70' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.30> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.30> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 91 [1/1] (0.00ns)   --->   "%sext_ln101 = sext i16 %delta" [../tutorial_example/source/hls.cpp:101]   --->   Operation 91 'sext' 'sext_ln101' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.00>
ST_7 : Operation 92 [1/1] (0.78ns)   --->   "%sub_ln101 = sub i17 %zext_ln95, i17 %sext_ln101" [../tutorial_example/source/hls.cpp:101]   --->   Operation 92 'sub' 'sub_ln101' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 93 [1/1] (0.00ns)   --->   "%tmp_6 = bitselect i1 @_ssdm_op_BitSelect.i1.i17.i32, i17 %sub_ln101, i32 16" [../tutorial_example/source/hls.cpp:101]   --->   Operation 93 'bitselect' 'tmp_6' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.00>
ST_7 : Operation 94 [1/1] (0.00ns)   --->   "%tmp_7 = partselect i9 @_ssdm_op_PartSelect.i9.i17.i32.i32, i17 %sub_ln101, i32 8, i32 16" [../tutorial_example/source/hls.cpp:101]   --->   Operation 94 'partselect' 'tmp_7' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.00>
ST_7 : Operation 95 [1/1] (0.71ns)   --->   "%icmp_ln101 = icmp_sgt  i9 %tmp_7, i9 0" [../tutorial_example/source/hls.cpp:101]   --->   Operation 95 'icmp' 'icmp_ln101' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.71> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.71> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 96 [1/1] (0.00ns)   --->   "%trunc_ln101 = trunc i16 %delta" [../tutorial_example/source/hls.cpp:101]   --->   Operation 96 'trunc' 'trunc_ln101' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.00>
ST_7 : Operation 97 [1/1] (0.70ns)   --->   "%sub_ln101_1 = sub i8 %pix_base_load_2, i8 %trunc_ln101" [../tutorial_example/source/hls.cpp:101]   --->   Operation 97 'sub' 'sub_ln101_1' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.70> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 98 [1/1] (0.00ns) (grouped into LUT with out node cond95)   --->   "%not_s = xor i1 %tmp_6, i1 1" [../tutorial_example/source/hls.cpp:101]   --->   Operation 98 'xor' 'not_s' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 99 [1/1] (0.00ns) (grouped into LUT with out node cond95)   --->   "%select_ln101_cast = select i1 %not_s, i8 255, i8 0" [../tutorial_example/source/hls.cpp:101]   --->   Operation 99 'select' 'select_ln101_cast' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.27> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 100 [1/1] (0.00ns) (grouped into LUT with out node cond95)   --->   "%empty_14 = or i1 %tmp_6, i1 %icmp_ln101" [../tutorial_example/source/hls.cpp:101]   --->   Operation 100 'or' 'empty_14' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 101 [1/1] (0.30ns) (out node of the LUT)   --->   "%cond95 = select i1 %empty_14, i8 %select_ln101_cast, i8 %sub_ln101_1" [../tutorial_example/source/hls.cpp:101]   --->   Operation 101 'select' 'cond95' <Predicate = (!icmp_ln87 & no_q)> <Delay = 0.30> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.30> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 8 <SV = 7> <Delay = 1.28>
ST_8 : Operation 102 [1/1] ( I:1.24ns O:1.24ns )   --->   "%store_ln98 = store i8 %cond70, i21 %pix_base_addr_1" [../tutorial_example/source/hls.cpp:98]   --->   Operation 102 'store' 'store_ln98' <Predicate = (!icmp_ln87 & no_p)> <Delay = 1.24> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 1.24> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 2073600> <RAM>
ST_8 : Operation 103 [1/1] (0.00ns)   --->   "%br_ln99 = br void %if.end75" [../tutorial_example/source/hls.cpp:99]   --->   Operation 103 'br' 'br_ln99' <Predicate = (!icmp_ln87 & no_p)> <Delay = 0.00>
ST_8 : Operation 104 [1/1] (0.00ns)   --->   "%idx_load_1 = load i34 %idx" [../tutorial_example/source/hls.cpp:103]   --->   Operation 104 'load' 'idx_load_1' <Predicate = (!icmp_ln87)> <Delay = 0.00>
ST_8 : Operation 105 [1/1] (0.90ns)   --->   "%add_ln103 = add i34 %sext_ln76_cast, i34 %idx_load_1" [../tutorial_example/source/hls.cpp:103]   --->   Operation 105 'add' 'add_ln103' <Predicate = (!icmp_ln87)> <Delay = 0.90> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.90> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 106 [1/1] (0.38ns)   --->   "%store_ln103 = store i34 %add_ln103, i34 %idx" [../tutorial_example/source/hls.cpp:103]   --->   Operation 106 'store' 'store_ln103' <Predicate = (!icmp_ln87)> <Delay = 0.38>
ST_8 : Operation 107 [1/1] (0.00ns)   --->   "%br_ln87 = br void %for.body12" [../tutorial_example/source/hls.cpp:87]   --->   Operation 107 'br' 'br_ln87' <Predicate = (!icmp_ln87)> <Delay = 0.00>

State 9 <SV = 8> <Delay = 1.24>
ST_9 : Operation 108 [1/1] ( I:1.24ns O:1.24ns )   --->   "%store_ln101 = store i8 %cond95, i21 %pix_base_addr_2" [../tutorial_example/source/hls.cpp:101]   --->   Operation 108 'store' 'store_ln101' <Predicate = (no_q)> <Delay = 1.24> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 1.24> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 2073600> <RAM>
ST_9 : Operation 109 [1/1] (0.00ns)   --->   "%br_ln102 = br void %for.inc" [../tutorial_example/source/hls.cpp:102]   --->   Operation 109 'br' 'br_ln102' <Predicate = (no_q)> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 3.300ns, clock uncertainty: 0.891ns.

 <State 1>: 0.705ns
The critical path consists of the following:
	wire read operation ('select_ln84_read') on port 'select_ln84' [13]  (0.000 ns)
	'icmp' operation 1 bit ('no_p', ../tutorial_example/source/hls.cpp:84) [23]  (0.705 ns)

 <State 2>: 0.959ns
The critical path consists of the following:
	'load' operation 3 bit ('d', ../tutorial_example/source/hls.cpp:87) on local variable 'd', ../tutorial_example/source/hls.cpp:70 [29]  (0.000 ns)
	'icmp' operation 1 bit ('icmp_ln87', ../tutorial_example/source/hls.cpp:87) [30]  (0.572 ns)
	'store' operation 0 bit ('store_ln70', ../tutorial_example/source/hls.cpp:70) of variable 'd', ../tutorial_example/source/hls.cpp:87 on local variable 'd', ../tutorial_example/source/hls.cpp:70 [108]  (0.387 ns)

 <State 3>: 2.063ns
The critical path consists of the following:
	'add' operation 21 bit ('add_ln89', ../tutorial_example/source/hls.cpp:89) [41]  (0.815 ns)
	'getelementptr' operation 21 bit ('pix_base_addr', ../tutorial_example/source/hls.cpp:89) [43]  (0.000 ns)
	'load' operation 8 bit ('pix_base_load', ../tutorial_example/source/hls.cpp:89) on array 'pix_base' [44]  (1.248 ns)

 <State 4>: 2.063ns
The critical path consists of the following:
	'add' operation 21 bit ('add_ln92', ../tutorial_example/source/hls.cpp:92) [51]  (0.815 ns)
	'getelementptr' operation 21 bit ('pix_base_addr_3', ../tutorial_example/source/hls.cpp:92) [53]  (0.000 ns)
	'load' operation 8 bit ('pix_base_load_3', ../tutorial_example/source/hls.cpp:92) on array 'pix_base' [54]  (1.248 ns)

 <State 5>: 1.953ns
The critical path consists of the following:
	'load' operation 8 bit ('pix_base_load_2', ../tutorial_example/source/hls.cpp:91) on array 'pix_base' [50]  (1.248 ns)
	'sub' operation 9 bit ('sub_ln95', ../tutorial_example/source/hls.cpp:95) [59]  (0.705 ns)

 <State 6>: 1.834ns
The critical path consists of the following:
	'add' operation 12 bit ('add_ln95_1', ../tutorial_example/source/hls.cpp:95) [66]  (0.000 ns)
	'sub' operation 12 bit ('sub_ln95_1', ../tutorial_example/source/hls.cpp:95) [67]  (0.756 ns)
	'icmp' operation 1 bit ('icmp_ln96', ../tutorial_example/source/hls.cpp:96) [70]  (0.785 ns)
	'select' operation 16 bit ('delta', ../tutorial_example/source/hls.cpp:96) [73]  (0.292 ns)

 <State 7>: 1.803ns
The critical path consists of the following:
	'sub' operation 17 bit ('sub_ln101', ../tutorial_example/source/hls.cpp:101) [93]  (0.785 ns)
	'icmp' operation 1 bit ('icmp_ln101', ../tutorial_example/source/hls.cpp:101) [96]  (0.715 ns)
	'or' operation 1 bit ('empty_14', ../tutorial_example/source/hls.cpp:101) [101]  (0.000 ns)
	'select' operation 8 bit ('cond95', ../tutorial_example/source/hls.cpp:101) [102]  (0.303 ns)

 <State 8>: 1.288ns
The critical path consists of the following:
	'load' operation 34 bit ('idx_load_1', ../tutorial_example/source/hls.cpp:103) on local variable 'idx' [106]  (0.000 ns)
	'add' operation 34 bit ('add_ln103', ../tutorial_example/source/hls.cpp:103) [107]  (0.901 ns)
	'store' operation 0 bit ('store_ln103', ../tutorial_example/source/hls.cpp:103) of variable 'add_ln103', ../tutorial_example/source/hls.cpp:103 on local variable 'idx' [109]  (0.387 ns)

 <State 9>: 1.248ns
The critical path consists of the following:
	'store' operation 0 bit ('store_ln101', ../tutorial_example/source/hls.cpp:101) of variable 'cond95', ../tutorial_example/source/hls.cpp:101 on array 'pix_base' [103]  (1.248 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
