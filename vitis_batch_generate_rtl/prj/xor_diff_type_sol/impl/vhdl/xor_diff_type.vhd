-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xor_diff_type is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_core : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_part : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_parent : IN STD_LOGIC_VECTOR (7 downto 0);
    xor_val32 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xor_val32_ap_vld : OUT STD_LOGIC;
    xor_val16 : IN STD_LOGIC_VECTOR (15 downto 0);
    xor_val8 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_ce : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC );
end;


architecture behav of xor_diff_type is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "xor_diff_type_xor_diff_type,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.293000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=16,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal zext_ln12_fu_53_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln12_fu_57_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    xor_ln12_fu_57_p2 <= (zext_ln12_fu_53_p1 xor xor_val16);
    xor_val32 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln12_fu_57_p2),32));

    xor_val32_ap_vld_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_start = ap_const_logic_1))) then 
            xor_val32_ap_vld <= ap_const_logic_1;
        else 
            xor_val32_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln12_fu_53_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_val8),16));
end behav;
