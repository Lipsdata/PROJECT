// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="array_xor_array_xor,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.654000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=11,HLS_SYN_LUT=329,HLS_VERSION=2024_2}" *)

module array_xor (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        ap_core,
        ap_part,
        ap_parent,
        arr_d1_address0,
        arr_d1_ce0,
        arr_d1_we0,
        arr_d1_d0,
        arr_s1_address0,
        arr_s1_ce0,
        arr_s1_q0,
        arr_s2_address0,
        arr_s2_ce0,
        arr_s2_q0,
        count
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [7:0] ap_core;
input  [7:0] ap_part;
input  [7:0] ap_parent;
output  [3:0] arr_d1_address0;
output   arr_d1_ce0;
output   arr_d1_we0;
output  [31:0] arr_d1_d0;
output  [3:0] arr_s1_address0;
output   arr_s1_ce0;
input  [31:0] arr_s1_q0;
output  [3:0] arr_s2_address0;
output   arr_s2_ce0;
input  [31:0] arr_s2_q0;
input  [31:0] count;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln28_fu_153_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln28_fu_165_p1;
reg   [63:0] zext_ln28_reg_193;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_52;
wire   [3:0] add_ln28_fu_159_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_1;
reg    arr_s1_ce0_local;
reg    arr_s2_ce0_local;
reg    arr_d1_we0_local;
wire   [31:0] xor_ln29_fu_176_p2;
reg    arr_d1_ce0_local;
wire   [0:0] empty_fu_101_p2;
wire   [31:0] xor_ln28_fu_107_p2;
wire   [31:0] select_ln28_fu_113_p3;
wire   [0:0] empty_7_fu_121_p2;
wire   [31:0] xor_ln28_1_fu_127_p2;
wire   [31:0] zext_ln28_1_fu_149_p1;
wire   [31:0] select_ln28_1_fu_133_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_101;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_fu_52 = 4'd0;
#0 ap_done_reg = 1'b0;
end

array_xor_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        if ((1'b1 == ap_ce)) begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_101)) begin
        if ((icmp_ln28_fu_153_p2 == 1'd0)) begin
            i_fu_52 <= add_ln28_fu_159_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln28_reg_193[3 : 0] <= zext_ln28_fu_165_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_153_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_d1_ce0_local = 1'b1;
    end else begin
        arr_d1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_d1_we0_local = 1'b1;
    end else begin
        arr_d1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_s1_ce0_local = 1'b1;
    end else begin
        arr_s1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_s2_ce0_local = 1'b1;
    end else begin
        arr_s2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_159_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

always @ (*) begin
    ap_condition_101 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign arr_d1_address0 = zext_ln28_reg_193;

assign arr_d1_ce0 = arr_d1_ce0_local;

assign arr_d1_d0 = xor_ln29_fu_176_p2;

assign arr_d1_we0 = arr_d1_we0_local;

assign arr_s1_address0 = zext_ln28_fu_165_p1;

assign arr_s1_ce0 = arr_s1_ce0_local;

assign arr_s2_address0 = zext_ln28_fu_165_p1;

assign arr_s2_ce0 = arr_s2_ce0_local;

assign empty_7_fu_121_p2 = ((select_ln28_fu_113_p3 > 32'd4294967285) ? 1'b1 : 1'b0);

assign empty_fu_101_p2 = (($signed(count) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_153_p2 = ((zext_ln28_1_fu_149_p1 == select_ln28_1_fu_133_p3) ? 1'b1 : 1'b0);

assign select_ln28_1_fu_133_p3 = ((empty_7_fu_121_p2[0:0] == 1'b1) ? xor_ln28_1_fu_127_p2 : 32'd10);

assign select_ln28_fu_113_p3 = ((empty_fu_101_p2[0:0] == 1'b1) ? xor_ln28_fu_107_p2 : 32'd4294967295);

assign xor_ln28_1_fu_127_p2 = (select_ln28_fu_113_p3 ^ 32'd4294967295);

assign xor_ln28_fu_107_p2 = (count ^ 32'd4294967295);

assign xor_ln29_fu_176_p2 = (arr_s2_q0 ^ arr_s1_q0);

assign zext_ln28_1_fu_149_p1 = ap_sig_allocacmp_i_1;

assign zext_ln28_fu_165_p1 = ap_sig_allocacmp_i_1;

always @ (posedge ap_clk) begin
    zext_ln28_reg_193[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //array_xor
