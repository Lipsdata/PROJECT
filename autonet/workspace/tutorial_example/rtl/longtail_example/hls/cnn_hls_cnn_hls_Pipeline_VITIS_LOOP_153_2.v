// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_hls_cnn_hls_Pipeline_VITIS_LOOP_153_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        sub_i11,
        empty_14,
        empty,
        pixel_address0,
        pixel_ce0,
        pixel_q0,
        pixel_address1,
        pixel_ce1,
        pixel_we1,
        pixel_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] sub_i11;
input  [12:0] empty_14;
input  [12:0] empty;
output  [12:0] pixel_address0;
output   pixel_ce0;
input  [7:0] pixel_q0;
output  [12:0] pixel_address1;
output   pixel_ce1;
output   pixel_we1;
output  [7:0] pixel_d1;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln153_reg_261;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln153_fu_136_p2;
wire   [63:0] zext_ln154_fu_157_p1;
reg   [63:0] zext_ln154_reg_270;
wire    ap_block_pp0_stage1_11001;
wire   [7:0] reuse_select_fu_172_p3;
reg   [7:0] reuse_select_reg_280;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln154_1_fu_198_p1;
reg   [63:0] reuse_addr_reg_fu_50;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [7:0] reuse_reg_fu_54;
reg   [12:0] phi_mul_fu_58;
wire   [12:0] add_ln154_3_fu_188_p2;
reg   [30:0] y_fu_62;
wire   [30:0] add_ln154_fu_142_p2;
reg   [30:0] ap_sig_allocacmp_y_1;
reg    pixel_ce0_local;
reg    pixel_we1_local;
reg    pixel_ce1_local;
wire   [31:0] zext_ln153_fu_132_p1;
wire  signed [12:0] zext_ln154_fu_157_p0;
wire   [12:0] grp_fu_213_p3;
wire   [0:0] addr_cmp_fu_167_p2;
wire  signed [12:0] add_ln154_3_fu_188_p1;
wire   [12:0] add_ln154_2_fu_193_p2;
wire  signed [12:0] grp_fu_213_p0;
reg    grp_fu_213_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_126;
reg    ap_condition_280;
reg    ap_condition_76;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 reuse_addr_reg_fu_50 = 64'd0;
#0 reuse_reg_fu_54 = 8'd0;
#0 phi_mul_fu_58 = 13'd0;
#0 y_fu_62 = 31'd0;
#0 ap_done_reg = 1'b0;
end

cnn_hls_mac_muladd_13s_13s_13ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 13 ))
mac_muladd_13s_13s_13ns_13_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_213_p0),
    .din1(empty_14),
    .din2(empty),
    .ce(grp_fu_213_ce),
    .dout(grp_fu_213_p3)
);

cnn_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        if ((1'b1 == ap_ce)) begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_condition_280)) begin
            phi_mul_fu_58 <= 13'd0;
        end else if ((1'b1 == ap_condition_126)) begin
            phi_mul_fu_58 <= add_ln154_3_fu_188_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_condition_280)) begin
            reuse_addr_reg_fu_50 <= 64'd18446744073709551615;
        end else if ((1'b1 == ap_condition_126)) begin
            reuse_addr_reg_fu_50 <= zext_ln154_1_fu_198_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_76)) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_reg_fu_54 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg_fu_54 <= reuse_select_fu_172_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_76)) begin
        if (((icmp_ln153_fu_136_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            y_fu_62 <= add_ln154_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_62 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln154_reg_270[12 : 0] <= zext_ln154_fu_157_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln153_reg_261 <= icmp_ln153_fu_136_p2;
        reuse_select_reg_280 <= reuse_select_fu_172_p3;
    end
end

always @ (*) begin
    if (((icmp_ln153_reg_261 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_y_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_y_1 = y_fu_62;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))))) begin
        grp_fu_213_ce = 1'b1;
    end else begin
        grp_fu_213_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pixel_ce0_local = 1'b1;
    end else begin
        pixel_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pixel_ce1_local = 1'b1;
    end else begin
        pixel_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pixel_we1_local = 1'b1;
    end else begin
        pixel_we1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln154_2_fu_193_p2 = (phi_mul_fu_58 + empty);

assign add_ln154_3_fu_188_p1 = empty_14;

assign add_ln154_3_fu_188_p2 = ($signed(phi_mul_fu_58) + $signed(add_ln154_3_fu_188_p1));

assign add_ln154_fu_142_p2 = (ap_sig_allocacmp_y_1 + 31'd1);

assign addr_cmp_fu_167_p2 = ((reuse_addr_reg_fu_50 == zext_ln154_reg_270) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

always @ (*) begin
    ap_condition_126 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_280 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

always @ (*) begin
    ap_condition_76 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign grp_fu_213_p0 = add_ln154_fu_142_p2[12:0];

assign icmp_ln153_fu_136_p2 = (($signed(zext_ln153_fu_132_p1) < $signed(sub_i11)) ? 1'b1 : 1'b0);

assign pixel_address0 = zext_ln154_fu_157_p1;

assign pixel_address1 = zext_ln154_1_fu_198_p1;

assign pixel_ce0 = pixel_ce0_local;

assign pixel_ce1 = pixel_ce1_local;

assign pixel_d1 = reuse_select_reg_280;

assign pixel_we1 = pixel_we1_local;

assign reuse_select_fu_172_p3 = ((addr_cmp_fu_167_p2[0:0] == 1'b1) ? reuse_reg_fu_54 : pixel_q0);

assign zext_ln153_fu_132_p1 = ap_sig_allocacmp_y_1;

assign zext_ln154_1_fu_198_p1 = add_ln154_2_fu_193_p2;

assign zext_ln154_fu_157_p0 = grp_fu_213_p3;

assign zext_ln154_fu_157_p1 = $unsigned(zext_ln154_fu_157_p0);

always @ (posedge ap_clk) begin
    zext_ln154_reg_270[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //cnn_hls_cnn_hls_Pipeline_VITIS_LOOP_153_2
