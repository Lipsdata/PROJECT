// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module hevc_loop_filter_chroma_8bit_hls_hevc_loop_filter_chroma_8bit_hls_Pipeline_VITIS_LOOP_87_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        sext_ln76,
        empty_12,
        mul13_cast,
        pix_base_address0,
        pix_base_ce0,
        pix_base_we0,
        pix_base_d0,
        pix_base_q0,
        pix_base_address1,
        pix_base_ce1,
        pix_base_q1,
        empty,
        sub38,
        tc,
        select_ln84,
        select_ln85
);

parameter    ap_ST_fsm_pp0_stage0 = 7'd1;
parameter    ap_ST_fsm_pp0_stage1 = 7'd2;
parameter    ap_ST_fsm_pp0_stage2 = 7'd4;
parameter    ap_ST_fsm_pp0_stage3 = 7'd8;
parameter    ap_ST_fsm_pp0_stage4 = 7'd16;
parameter    ap_ST_fsm_pp0_stage5 = 7'd32;
parameter    ap_ST_fsm_pp0_stage6 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] sext_ln76;
input  [20:0] empty_12;
input  [20:0] mul13_cast;
output  [20:0] pix_base_address0;
output   pix_base_ce0;
output   pix_base_we0;
output  [7:0] pix_base_d0;
input  [7:0] pix_base_q0;
output  [20:0] pix_base_address1;
output   pix_base_ce1;
input  [7:0] pix_base_q1;
input  [20:0] empty;
input  [15:0] sub38;
input  [14:0] tc;
input  [7:0] select_ln84;
input  [7:0] select_ln85;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [0:0] icmp_ln87_fu_223_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage6;
reg    ap_block_pp0_stage6_subdone;
reg   [7:0] reg_185;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage0_11001;
wire   [15:0] tc_cast_fu_190_p1;
reg   [15:0] tc_cast_reg_569;
wire  signed [33:0] sext_ln76_cast_fu_194_p1;
reg  signed [33:0] sext_ln76_cast_reg_575;
wire   [0:0] no_p_fu_198_p2;
reg   [0:0] no_p_reg_580;
wire   [0:0] no_q_fu_204_p2;
reg   [0:0] no_q_reg_584;
reg   [0:0] icmp_ln87_reg_588;
wire    ap_block_pp0_stage1_11001;
wire   [20:0] pix_fu_242_p2;
reg   [20:0] pix_reg_592;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [20:0] pix_base_addr_1_reg_605;
reg   [7:0] pix_base_load_1_reg_610;
reg   [20:0] pix_base_addr_2_reg_617;
reg   [7:0] pix_base_load_3_reg_627;
wire   [8:0] sub_ln95_fu_290_p2;
reg   [8:0] sub_ln95_reg_632;
wire   [8:0] add_ln95_fu_300_p2;
reg   [8:0] add_ln95_reg_637;
wire  signed [15:0] delta_fu_366_p3;
reg  signed [15:0] delta_reg_642;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_11001;
wire   [7:0] cond70_fu_441_p3;
reg   [7:0] cond70_reg_650;
wire    ap_block_pp0_stage6_11001;
wire   [7:0] cond95_fu_511_p3;
reg   [7:0] cond95_reg_655;
wire   [63:0] zext_ln89_fu_256_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln90_fu_265_p1;
wire   [63:0] zext_ln70_fu_270_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln92_fu_278_p1;
reg   [33:0] idx_fu_88;
wire   [33:0] add_ln103_fu_522_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage0;
reg   [2:0] d_fu_92;
wire   [2:0] d_2_fu_229_p2;
reg    pix_base_ce1_local;
reg   [20:0] pix_base_address1_local;
reg    pix_base_ce0_local;
reg   [20:0] pix_base_address0_local;
reg    pix_base_we0_local;
reg   [7:0] pix_base_d0_local;
wire   [20:0] trunc_ln87_fu_238_p1;
wire   [20:0] add_ln89_fu_252_p2;
wire   [20:0] sub_ln90_fu_261_p2;
wire   [20:0] add_ln92_fu_274_p2;
wire    ap_block_pp0_stage4;
wire   [8:0] zext_ln95_2_fu_283_p1;
wire   [8:0] zext_ln95_3_fu_287_p1;
wire   [8:0] zext_ln95_4_fu_296_p1;
wire    ap_block_pp0_stage5;
wire   [10:0] tmp_3_fu_306_p3;
wire   [11:0] zext_ln95_6_fu_320_p1;
wire  signed [11:0] sext_ln95_fu_313_p1;
wire   [11:0] add_ln95_1_fu_323_p2;
wire   [11:0] zext_ln95_5_fu_317_p1;
wire   [11:0] sub_ln95_1_fu_329_p2;
wire   [8:0] tmp_2_fu_335_p4;
wire  signed [15:0] temp_fu_345_p1;
wire   [0:0] icmp_ln96_1_fu_354_p2;
wire   [0:0] icmp_ln96_fu_349_p2;
wire   [15:0] select_ln96_fu_359_p3;
wire    ap_block_pp0_stage6;
wire  signed [16:0] sext_ln98_fu_380_p1;
wire   [16:0] zext_ln95_1_fu_377_p1;
wire   [16:0] add_ln98_fu_383_p2;
wire   [8:0] tmp_5_fu_397_p4;
wire   [7:0] trunc_ln98_fu_413_p1;
wire   [0:0] tmp_4_fu_389_p3;
wire   [0:0] not_23_fu_421_p2;
wire   [0:0] icmp_ln98_fu_407_p2;
wire   [0:0] empty_13_fu_435_p2;
wire   [7:0] select_ln98_cast_fu_427_p3;
wire   [7:0] add_ln98_1_fu_416_p2;
wire   [16:0] zext_ln95_fu_373_p1;
wire  signed [16:0] sext_ln101_fu_449_p1;
wire   [16:0] sub_ln101_fu_452_p2;
wire   [8:0] tmp_7_fu_466_p4;
wire   [7:0] trunc_ln101_fu_482_p1;
wire   [0:0] tmp_6_fu_458_p3;
wire   [0:0] not_s_fu_491_p2;
wire   [0:0] icmp_ln101_fu_476_p2;
wire   [0:0] empty_14_fu_505_p2;
wire   [7:0] select_ln101_cast_fu_497_p3;
wire   [7:0] sub_ln101_1_fu_485_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [6:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_583;
reg    ap_condition_587;
reg    ap_condition_118;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 idx_fu_88 = 34'd0;
#0 d_fu_92 = 3'd0;
#0 ap_done_reg = 1'b0;
end

hevc_loop_filter_chroma_8bit_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        if ((1'b1 == ap_ce)) begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if ((1'b1 == ap_condition_587)) begin
            d_fu_92 <= 3'd0;
        end else if ((1'b1 == ap_condition_583)) begin
            d_fu_92 <= d_2_fu_229_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_118)) begin
        if ((ap_loop_init == 1'b1)) begin
            idx_fu_88 <= 34'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln87_reg_588 == 1'd0))) begin
            idx_fu_88 <= add_ln103_fu_522_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_ce))) begin
        if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            reg_185 <= pix_base_q0;
        end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            reg_185 <= pix_base_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln95_reg_637 <= add_ln95_fu_300_p2;
        sub_ln95_reg_632 <= sub_ln95_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == ap_ce))) begin
        cond70_reg_650 <= cond70_fu_441_p3;
        cond95_reg_655 <= cond95_fu_511_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        delta_reg_642 <= delta_fu_366_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln87_reg_588 <= icmp_ln87_fu_223_p2;
        pix_reg_592 <= pix_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        no_p_reg_580 <= no_p_fu_198_p2;
        no_q_reg_584 <= no_q_fu_204_p2;
        sext_ln76_cast_reg_575 <= sext_ln76_cast_fu_194_p1;
        tc_cast_reg_569[14 : 0] <= tc_cast_fu_190_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        pix_base_addr_1_reg_605 <= zext_ln90_fu_265_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_ce))) begin
        pix_base_addr_2_reg_617 <= zext_ln70_fu_270_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_ce))) begin
        pix_base_load_1_reg_610 <= pix_base_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        pix_base_load_3_reg_627 <= pix_base_q1;
    end
end

always @ (*) begin
    if (((icmp_ln87_fu_223_p2 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pix_base_address0_local = pix_base_addr_2_reg_617;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_base_address0_local = pix_base_addr_1_reg_605;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        pix_base_address0_local = zext_ln70_fu_270_p1;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        pix_base_address0_local = zext_ln90_fu_265_p1;
    end else begin
        pix_base_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0_reg == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            pix_base_address1_local = zext_ln92_fu_278_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            pix_base_address1_local = zext_ln89_fu_256_p1;
        end else begin
            pix_base_address1_local = 'bx;
        end
    end else begin
        pix_base_address1_local = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_ce)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        pix_base_ce0_local = 1'b1;
    end else begin
        pix_base_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_ce)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        pix_base_ce1_local = 1'b1;
    end else begin
        pix_base_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            pix_base_d0_local = cond95_reg_655;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pix_base_d0_local = cond70_reg_650;
        end else begin
            pix_base_d0_local = 'bx;
        end
    end else begin
        pix_base_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1) & (no_q_reg_584 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln87_reg_588 == 1'd0) & (no_p_reg_580 == 1'd1)))) begin
        pix_base_we0_local = 1'b1;
    end else begin
        pix_base_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_fu_522_p2 = ($signed(sext_ln76_cast_reg_575) + $signed(idx_fu_88));

assign add_ln89_fu_252_p2 = (pix_reg_592 + mul13_cast);

assign add_ln92_fu_274_p2 = (pix_reg_592 + empty);

assign add_ln95_1_fu_323_p2 = ($signed(zext_ln95_6_fu_320_p1) + $signed(sext_ln95_fu_313_p1));

assign add_ln95_fu_300_p2 = (zext_ln95_4_fu_296_p1 + 9'd4);

assign add_ln98_1_fu_416_p2 = (pix_base_load_1_reg_610 + trunc_ln98_fu_413_p1);

assign add_ln98_fu_383_p2 = ($signed(sext_ln98_fu_380_p1) + $signed(zext_ln95_1_fu_377_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_subdone = (1'b0 == ap_ce);
end

always @ (*) begin
    ap_condition_118 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_583 = ((icmp_ln87_fu_223_p2 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_587 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign cond70_fu_441_p3 = ((empty_13_fu_435_p2[0:0] == 1'b1) ? select_ln98_cast_fu_427_p3 : add_ln98_1_fu_416_p2);

assign cond95_fu_511_p3 = ((empty_14_fu_505_p2[0:0] == 1'b1) ? select_ln101_cast_fu_497_p3 : sub_ln101_1_fu_485_p2);

assign d_2_fu_229_p2 = (d_fu_92 + 3'd1);

assign delta_fu_366_p3 = ((icmp_ln96_fu_349_p2[0:0] == 1'b1) ? sub38 : select_ln96_fu_359_p3);

assign empty_13_fu_435_p2 = (tmp_4_fu_389_p3 | icmp_ln98_fu_407_p2);

assign empty_14_fu_505_p2 = (tmp_6_fu_458_p3 | icmp_ln101_fu_476_p2);

assign icmp_ln101_fu_476_p2 = (($signed(tmp_7_fu_466_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_223_p2 = ((d_fu_92 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln96_1_fu_354_p2 = (($signed(temp_fu_345_p1) > $signed(tc_cast_reg_569)) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_349_p2 = (($signed(temp_fu_345_p1) < $signed(sub38)) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_407_p2 = (($signed(tmp_5_fu_397_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign no_p_fu_198_p2 = ((select_ln84 == 8'd0) ? 1'b1 : 1'b0);

assign no_q_fu_204_p2 = ((select_ln85 == 8'd0) ? 1'b1 : 1'b0);

assign not_23_fu_421_p2 = (tmp_4_fu_389_p3 ^ 1'd1);

assign not_s_fu_491_p2 = (tmp_6_fu_458_p3 ^ 1'd1);

assign pix_base_address0 = pix_base_address0_local;

assign pix_base_address1 = pix_base_address1_local;

assign pix_base_ce0 = pix_base_ce0_local;

assign pix_base_ce1 = pix_base_ce1_local;

assign pix_base_d0 = pix_base_d0_local;

assign pix_base_we0 = pix_base_we0_local;

assign pix_fu_242_p2 = (trunc_ln87_fu_238_p1 + empty_12);

assign select_ln101_cast_fu_497_p3 = ((not_s_fu_491_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln96_fu_359_p3 = ((icmp_ln96_1_fu_354_p2[0:0] == 1'b1) ? tc_cast_reg_569 : temp_fu_345_p1);

assign select_ln98_cast_fu_427_p3 = ((not_23_fu_421_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign sext_ln101_fu_449_p1 = delta_reg_642;

assign sext_ln76_cast_fu_194_p1 = $signed(sext_ln76);

assign sext_ln95_fu_313_p1 = $signed(tmp_3_fu_306_p3);

assign sext_ln98_fu_380_p1 = delta_reg_642;

assign sub_ln101_1_fu_485_p2 = (reg_185 - trunc_ln101_fu_482_p1);

assign sub_ln101_fu_452_p2 = ($signed(zext_ln95_fu_373_p1) - $signed(sext_ln101_fu_449_p1));

assign sub_ln90_fu_261_p2 = (pix_reg_592 - empty);

assign sub_ln95_1_fu_329_p2 = (add_ln95_1_fu_323_p2 - zext_ln95_5_fu_317_p1);

assign sub_ln95_fu_290_p2 = (zext_ln95_2_fu_283_p1 - zext_ln95_3_fu_287_p1);

assign tc_cast_fu_190_p1 = tc;

assign temp_fu_345_p1 = $signed(tmp_2_fu_335_p4);

assign tmp_2_fu_335_p4 = {{sub_ln95_1_fu_329_p2[11:3]}};

assign tmp_3_fu_306_p3 = {{sub_ln95_reg_632}, {2'd0}};

assign tmp_4_fu_389_p3 = add_ln98_fu_383_p2[32'd16];

assign tmp_5_fu_397_p4 = {{add_ln98_fu_383_p2[16:8]}};

assign tmp_6_fu_458_p3 = sub_ln101_fu_452_p2[32'd16];

assign tmp_7_fu_466_p4 = {{sub_ln101_fu_452_p2[16:8]}};

assign trunc_ln101_fu_482_p1 = delta_reg_642[7:0];

assign trunc_ln87_fu_238_p1 = idx_fu_88[20:0];

assign trunc_ln98_fu_413_p1 = delta_reg_642[7:0];

assign zext_ln70_fu_270_p1 = pix_reg_592;

assign zext_ln89_fu_256_p1 = add_ln89_fu_252_p2;

assign zext_ln90_fu_265_p1 = sub_ln90_fu_261_p2;

assign zext_ln92_fu_278_p1 = add_ln92_fu_274_p2;

assign zext_ln95_1_fu_377_p1 = pix_base_load_1_reg_610;

assign zext_ln95_2_fu_283_p1 = pix_base_q0;

assign zext_ln95_3_fu_287_p1 = pix_base_load_1_reg_610;

assign zext_ln95_4_fu_296_p1 = reg_185;

assign zext_ln95_5_fu_317_p1 = pix_base_load_3_reg_627;

assign zext_ln95_6_fu_320_p1 = add_ln95_reg_637;

assign zext_ln95_fu_373_p1 = reg_185;

always @ (posedge ap_clk) begin
    tc_cast_reg_569[15] <= 1'b0;
end

endmodule //hevc_loop_filter_chroma_8bit_hls_hevc_loop_filter_chroma_8bit_hls_Pipeline_VITIS_LOOP_87_2
