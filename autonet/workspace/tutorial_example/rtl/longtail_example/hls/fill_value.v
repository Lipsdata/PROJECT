// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fill_value_fill_value,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.128000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=80,HLS_SYN_LUT=83,HLS_VERSION=2024_2}" *)

module fill_value (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_core,
        ap_part,
        ap_parent,
        value_r,
        fillsize,
        big_array_address0,
        big_array_ce0,
        big_array_we0,
        big_array_d0,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] ap_core;
input  [7:0] ap_part;
input  [7:0] ap_parent;
input  [31:0] value_r;
input  [31:0] fillsize;
output  [13:0] big_array_address0;
output   big_array_ce0;
output   big_array_we0;
output  [31:0] big_array_d0;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] fillsize_read_reg_115;
reg   [31:0] value_r_read_reg_120;
wire   [63:0] zext_ln45_fu_98_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln45_fu_87_p2;
reg   [13:0] i_fu_46;
wire   [13:0] add_ln45_fu_92_p2;
reg    big_array_we0_local;
reg    big_array_ce0_local;
wire   [31:0] zext_ln45_1_fu_83_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 i_fu_46 = 14'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        if ((1'b1 == ap_ce)) begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            i_fu_46 <= 14'd0;
        end else if (((icmp_ln45_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            i_fu_46 <= add_ln45_fu_92_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        fillsize_read_reg_115 <= fillsize;
        value_r_read_reg_120 <= value_r;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
        big_array_ce0_local = 1'b1;
    end else begin
        big_array_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
        big_array_we0_local = 1'b1;
    end else begin
        big_array_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln45_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_92_p2 = (i_fu_46 + 14'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign big_array_address0 = zext_ln45_fu_98_p1;

assign big_array_ce0 = big_array_ce0_local;

assign big_array_d0 = value_r_read_reg_120;

assign big_array_we0 = big_array_we0_local;

assign icmp_ln45_fu_87_p2 = (($signed(zext_ln45_1_fu_83_p1) < $signed(fillsize_read_reg_115)) ? 1'b1 : 1'b0);

assign zext_ln45_1_fu_83_p1 = i_fu_46;

assign zext_ln45_fu_98_p1 = i_fu_46;

endmodule //fill_value
