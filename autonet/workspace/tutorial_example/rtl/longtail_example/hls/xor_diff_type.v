// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="xor_diff_type_xor_diff_type,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu19p-fsvb3824-2-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.293000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=16,HLS_VERSION=2024_2}" *)

module xor_diff_type (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_core,
        ap_part,
        ap_parent,
        xor_val32,
        xor_val32_ap_vld,
        xor_val16,
        xor_val8,
        ap_ce,
        ap_rst
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] ap_core;
input  [7:0] ap_part;
input  [7:0] ap_parent;
output  [31:0] xor_val32;
output   xor_val32_ap_vld;
input  [15:0] xor_val16;
input  [7:0] xor_val8;
input   ap_ce;
input   ap_rst;

reg xor_val32_ap_vld;

wire   [15:0] zext_ln12_fu_53_p1;
wire   [15:0] xor_ln12_fu_57_p2;
wire    ap_ce_reg;

always @ (*) begin
    if (((1'b1 == ap_ce) & (ap_start == 1'b1))) begin
        xor_val32_ap_vld = 1'b1;
    end else begin
        xor_val32_ap_vld = 1'b0;
    end
end

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign xor_ln12_fu_57_p2 = (zext_ln12_fu_53_p1 ^ xor_val16);

assign xor_val32 = xor_ln12_fu_57_p2;

assign zext_ln12_fu_53_p1 = xor_val8;

endmodule //xor_diff_type
